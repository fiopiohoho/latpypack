{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to latpypack","text":"<p>latihan buat package python</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://fiopiohoho.github.io/latpypack</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#latpypack.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>latpypack/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/fiopiohoho/latpypack/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>latpypack could always use more documentation, whether as part of the official latpypack docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/fiopiohoho/latpypack/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up latpypack for local development.</p> <ol> <li> <p>Fork the latpypack repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/latpypack.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv latpypack\n$ cd latpypack/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 latpypack tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/fiopiohoho/latpypack/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install latpypack, run this command in your terminal:</p> <pre><code>pip install latpypack\n</code></pre> <p>This is the preferred method to install latpypack, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install latpypack from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/fiopiohoho/latpypack\n</code></pre>"},{"location":"latpypack/","title":"latpypack module","text":"<p>Main module.</p>"},{"location":"latpypack/#latpypack.latpypack.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>_The ipyleaflet.Map class.</p> required Source code in <code>latpypack/latpypack.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): _The ipyleaflet.Map class.\n    \"\"\"\n    def __init__(self, center=[20,0], zoom=2, **kwargs):\n        \"\"\"Initialize the map\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layers_control()\n\n        # self.add_toolbar()\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n        return layer\n\n    def add_basemap(self, name, **kwargs):\n        \"\"\"Adds a basemap to the current map.\n\n        This method allows adding a basemap either by specifying a predefined basemap name\n        or by directly providing a tile layer object. If a string is provided, it will\n        look up the corresponding basemap URL and add it as a tile layer. If a tile layer\n        object is provided, it will be added directly to the map.\n\n        Args:\n            name (str or object): The name of the predefined basemap (as a string) or a\n                tile layer object to be added directly.\n            **kwargs: Additional keyword arguments to pass to the underlying tile layer\n                or basemap configuration.\n\n        Example:\n            &gt;&gt;&gt; map.add_basemap(\"OpenStreetMap\")  # Adds OpenStreetMap basemap\n            &gt;&gt;&gt; map.add_basemap(custom_tile_layer)  # Adds a custom tile layer\n        \"\"\"       \n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)  \n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"add a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        Returns:\n            layer : The GeoJSON layer that was added to the map.\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n        return layer\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"Adds a shapefile to the current object by converting it to GeoJSON.\n\n        Args:\n            data (str | shapefile.reader): The path to the shapefile or a shapefile reader object.\n            name (str, optional): The name of the layer to be added. Defaults to \"shp\".\n        \"\"\"\n\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"latpypack/#latpypack.latpypack.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map</p> Source code in <code>latpypack/latpypack.py</code> <pre><code>def __init__(self, center=[20,0], zoom=2, **kwargs):\n    \"\"\"Initialize the map\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layers_control()\n\n    # self.add_toolbar()\n</code></pre>"},{"location":"latpypack/#latpypack.latpypack.Map.add_basemap","title":"<code>add_basemap(self, name, **kwargs)</code>","text":"<p>Adds a basemap to the current map.</p> <p>This method allows adding a basemap either by specifying a predefined basemap name or by directly providing a tile layer object. If a string is provided, it will look up the corresponding basemap URL and add it as a tile layer. If a tile layer object is provided, it will be added directly to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the predefined basemap (as a string) or a tile layer object to be added directly.</p> required <code>**kwargs</code> <p>Additional keyword arguments to pass to the underlying tile layer or basemap configuration.</p> <code>{}</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; map.add_basemap(\"OpenStreetMap\")  # Adds OpenStreetMap basemap\n&gt;&gt;&gt; map.add_basemap(custom_tile_layer)  # Adds a custom tile layer\n</code></pre> Source code in <code>latpypack/latpypack.py</code> <pre><code>def add_basemap(self, name, **kwargs):\n    \"\"\"Adds a basemap to the current map.\n\n    This method allows adding a basemap either by specifying a predefined basemap name\n    or by directly providing a tile layer object. If a string is provided, it will\n    look up the corresponding basemap URL and add it as a tile layer. If a tile layer\n    object is provided, it will be added directly to the map.\n\n    Args:\n        name (str or object): The name of the predefined basemap (as a string) or a\n            tile layer object to be added directly.\n        **kwargs: Additional keyword arguments to pass to the underlying tile layer\n            or basemap configuration.\n\n    Example:\n        &gt;&gt;&gt; map.add_basemap(\"OpenStreetMap\")  # Adds OpenStreetMap basemap\n        &gt;&gt;&gt; map.add_basemap(custom_tile_layer)  # Adds a custom tile layer\n    \"\"\"       \n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)  \n</code></pre>"},{"location":"latpypack/#latpypack.latpypack.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> <p>Returns:</p> Type Description <code>layer </code> <p>The GeoJSON layer that was added to the map.</p> Source code in <code>latpypack/latpypack.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"add a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    Returns:\n        layer : The GeoJSON layer that was added to the map.\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n    return layer\n</code></pre>"},{"location":"latpypack/#latpypack.latpypack.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>latpypack/latpypack.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"latpypack/#latpypack.latpypack.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current object by converting it to GeoJSON.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | shapefile.reader</code> <p>The path to the shapefile or a shapefile reader object.</p> required <code>name</code> <code>str</code> <p>The name of the layer to be added. Defaults to \"shp\".</p> <code>'shp'</code> Source code in <code>latpypack/latpypack.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"Adds a shapefile to the current object by converting it to GeoJSON.\n\n    Args:\n        data (str | shapefile.reader): The path to the shapefile or a shapefile reader object.\n        name (str, optional): The name of the layer to be added. Defaults to \"shp\".\n    \"\"\"\n\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use latpypack in a project:</p> <pre><code>import latpypack\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import latpypack\n</pre> import latpypack In\u00a0[2]: Copied! <pre>center = [-2.548926, 118.0148634]\nzoom = 4\nm = latpypack.Map(center=center, zoom=zoom)\nm\n</pre> center = [-2.548926, 118.0148634] zoom = 4 m = latpypack.Map(center=center, zoom=zoom) m Out[2]: In\u00a0[3]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = [-2.548926, 118.0148634]\nzoom = 4\n\nm = Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom)\nm\n</pre> from ipyleaflet import Map, basemaps  center = [-2.548926, 118.0148634] zoom = 4  m = Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom) m Out[3]: In\u00a0[4]: Copied! <pre>\"\"\"get info tile layer\"\"\"\nm.layers\n</pre> \"\"\"get info tile layer\"\"\" m.layers Out[4]: <pre>(TileLayer(attribution='Map data: &amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors, &lt;a href=\"http://viewfinderpanoramas.org\"&gt;SRTM&lt;/a&gt; | Map style: &amp;copy; &lt;a href=\"https://opentopomap.org\"&gt;OpenTopoMap&lt;/a&gt; (&lt;a href=\"https://creativecommons.org/licenses/by-sa/3.0/\"&gt;CC-BY-SA&lt;/a&gt;)', base=True, max_zoom=17, min_zoom=1, name='OpenTopoMap', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://a.tile.opentopomap.org/{z}/{x}/{y}.png'),)</pre> In\u00a0[5]: Copied! <pre>\"\"\"show controls on the layer\"\"\"\nm.controls \n\n\"\"\"to remove controls\n```m.clear_controls()```\n\"\"\"\n</pre> \"\"\"show controls on the layer\"\"\" m.controls   \"\"\"to remove controls ```m.clear_controls()``` \"\"\" Out[5]: <pre>'to remove controls\\n```m.clear_controls()```\\n'</pre> In\u00a0[6]: Copied! <pre>m = latpypack.Map()\n\nurl = \"https://a.tile.opentopomap.org/{z}/{x}/{y}.png\"\nm.add_tile_layer(url, name=\"OpenTopoMap\")\nm\n</pre> m = latpypack.Map()  url = \"https://a.tile.opentopomap.org/{z}/{x}/{y}.png\" m.add_tile_layer(url, name=\"OpenTopoMap\") m Out[6]: In\u00a0[7]: Copied! <pre>m = latpypack.Map()\n\nm.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\")\nm\n</pre> m = latpypack.Map()  m.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\") m Out[7]:"},{"location":"examples/ipyleaflet/#add-basemap-simple-way","title":"Add Basemap simple way\"\u00b6","text":""},{"location":"examples/ipyleaflet/#add-tile-layer","title":"Add Tile Layer\u00b6","text":""},{"location":"examples/ipyleaflet/#add-basemap-form-leafmap","title":"Add Basemap form leafmap\u00b6","text":""},{"location":"examples/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2025-01-02 11:26:04.147015\n</pre> In\u00a0[1]: Copied! <pre>name = input(\"what is your name = \")\n# except EOFError:\nprint (f\"Hello {name}, would you like to learn some Python today?\")\n    \n</pre> name = input(\"what is your name = \") # except EOFError: print (f\"Hello {name}, would you like to learn some Python today?\")      <pre>Hello fio, would you like to learn some Python today?\n</pre> In\u00a0[8]: Copied! <pre>name = input(\"what is your name = \")\nprint (f\"Hello {name.lower()}, would you like to learn some Python today?\")\nprint (f\"Hello {name.upper()}, would you like to learn some Python today?\")\nprint (f\"Hello {name.title()}, would you like to learn some Python today?\")\n</pre> name = input(\"what is your name = \") print (f\"Hello {name.lower()}, would you like to learn some Python today?\") print (f\"Hello {name.upper()}, would you like to learn some Python today?\") print (f\"Hello {name.title()}, would you like to learn some Python today?\") <pre>Hello ferdinan aurifio, would you like to learn some Python today?\nHello FERDINAN AURIFIO, would you like to learn some Python today?\nHello Ferdinan Aurifio, would you like to learn some Python today?\n</pre> In\u00a0[13]: Copied! <pre>name = \"mother teresa\"\nprint (f'{name.title()} once said, \"Spread love everywhere you go. Let no one ever come to you without leaving happier\"')\n</pre> name = \"mother teresa\" print (f'{name.title()} once said, \"Spread love everywhere you go. Let no one ever come to you without leaving happier\"') <pre>Mother Teresa once said, \"Spread love everywhere you go. Let no one ever come to you without leaving happier\"\n</pre> In\u00a0[16]: Copied! <pre>name = \"\\t Ferdinan Aurifio \\n\"\n\n# Print the name with the whitespace around it\nprint(\"Original name with whitespace:\")\nprint(f\"'{name}'\")\n\n# Use lstrip() to remove whitespace from the left\nprint(\"\\nName after lstrip():\")\nprint(f\"'{name.lstrip()}'\")\n\n# Use rstrip() to remove whitespace from the right\nprint(\"\\nName after rstrip():\")\nprint(f\"'{name.rstrip()}'\")\n\n# Use strip() to remove whitespace from both sides\nprint(\"\\nName after strip():\")\nprint(f\"'{name.strip()}'\")\n</pre> name = \"\\t Ferdinan Aurifio \\n\"  # Print the name with the whitespace around it print(\"Original name with whitespace:\") print(f\"'{name}'\")  # Use lstrip() to remove whitespace from the left print(\"\\nName after lstrip():\") print(f\"'{name.lstrip()}'\")  # Use rstrip() to remove whitespace from the right print(\"\\nName after rstrip():\") print(f\"'{name.rstrip()}'\")  # Use strip() to remove whitespace from both sides print(\"\\nName after strip():\") print(f\"'{name.strip()}'\") <pre>Original name with whitespace:\n'\t Ferdinan Aurifio \n'\n\nName after lstrip():\n'Ferdinan Aurifio \n'\n\nName after rstrip():\n'\t Ferdinan Aurifio'\n\nName after strip():\n'Ferdinan Aurifio'\n</pre> In\u00a0[18]: Copied! <pre>names = [\"fio\", \"via\", \"jhon\", \"david\", \"gaby\"]\n\nfor name in names:\n    print (name)\n</pre> names = [\"fio\", \"via\", \"jhon\", \"david\", \"gaby\"]  for name in names:     print (name) <pre>fio\nvia\njhon\ndavid\ngaby\n</pre> In\u00a0[20]: Copied! <pre>motorcycles = [\"Honda\", \"Yamaha\", \"Ducati\", \"BMW\"]\n\nfor motorcycle in motorcycles:\n    print (f\"I would like to own a {motorcycle} motorcycle\")\n</pre> motorcycles = [\"Honda\", \"Yamaha\", \"Ducati\", \"BMW\"]  for motorcycle in motorcycles:     print (f\"I would like to own a {motorcycle} motorcycle\") <pre>I would like to own a Honda motorcycle\nI would like to own a Yamaha motorcycle\nI would like to own a Ducati motorcycle\nI would like to own a BMW motorcycle\n</pre> In\u00a0[21]: Copied! <pre>pizzas = [\"Margherita Pizza\", \"Pepperoni Pizza\", \"BBQ Chicken Pizza\"]\n\nfor pizza in pizzas:\n    print (f'I like {pizza} pizza.')\n</pre> pizzas = [\"Margherita Pizza\", \"Pepperoni Pizza\", \"BBQ Chicken Pizza\"]  for pizza in pizzas:     print (f'I like {pizza} pizza.')  <pre>I like Margherita Pizza pizza.\nI like Pepperoni Pizza pizza.\nI like BBQ Chicken Pizza pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[22]: Copied! <pre>print (\"I really love pizza!\")\n</pre> print (\"I really love pizza!\") <pre>I really love pizza!\n</pre> In\u00a0[24]: Copied! <pre>animals = [\"Dog\", \"Cat\", \"Fish\"]\n\nfor animal in animals:\n    print (f\"A {animal} would make a great pet.\")\n</pre> animals = [\"Dog\", \"Cat\", \"Fish\"]  for animal in animals:     print (f\"A {animal} would make a great pet.\")   <pre>A Dog would make a great pet.\nA Cat would make a great pet.\nA Fish would make a great pet.\nAny of these animals would make a great\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[\u00a0]: Copied! <pre>print (\"Any of these animals would make a great\")\n</pre> print (\"Any of these animals would make a great\") In\u00a0[26]: Copied! <pre># Create a list of numbers from 1 to 100\nnumbers = list(range(1, 101))\n\n# Verify the minimum value\nprint(f\"Minimum value: {min(numbers)}\")  # Should print 1\n\n# Verify the maximum value\nprint(f\"Maximum value: {max(numbers)}\")  # Should print 100\n\n# Calculate the sum of the numbers\nprint(f\"Sum of numbers: {sum(numbers)}\")  # Should print 5050\n</pre> # Create a list of numbers from 1 to 100 numbers = list(range(1, 101))  # Verify the minimum value print(f\"Minimum value: {min(numbers)}\")  # Should print 1  # Verify the maximum value print(f\"Maximum value: {max(numbers)}\")  # Should print 100  # Calculate the sum of the numbers print(f\"Sum of numbers: {sum(numbers)}\")  # Should print 5050  <pre>Minimum value: 1\nMaximum value: 100\nSum of numbers: 5050\n</pre> In\u00a0[36]: Copied! <pre># Create a list of numbers from 1 to 100\nnumbers = list(range(1, 21, 2))\n\nfor number in numbers:\n    print (number)\n</pre> # Create a list of numbers from 1 to 100 numbers = list(range(1, 21, 2))  for number in numbers:     print (number)  <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[37]: Copied! <pre># Use a for loop with modulo to find multiples of 3\nmultiples_of_three = []\n\nfor number in range(3, 31):\n    if number % 3 == 0:  # Check if the number is divisible by 3\n        multiples_of_three.append(number)\n\n# Print each multiple of 3\nfor number in multiples_of_three:\n    print(number)\n</pre> # Use a for loop with modulo to find multiples of 3 multiples_of_three = []  for number in range(3, 31):     if number % 3 == 0:  # Check if the number is divisible by 3         multiples_of_three.append(number)  # Print each multiple of 3 for number in multiples_of_three:     print(number)  <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[38]: Copied! <pre># Generate a list of the first 10 cubes using list comprehension\ncubes = [x**3 for x in range(1, 11)]\n\n# Print the list of cubes\nprint(cubes)\n</pre> # Generate a list of the first 10 cubes using list comprehension cubes = [x**3 for x in range(1, 11)]  # Print the list of cubes print(cubes)  <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[6]: Copied! <pre># Generate a list of the first 10 cubes using list comprehension\ncubes = [x**3 for x in range(1, 11)]\n\n# Print the entire list of cubes\nprint(\"The list of cubes:\")\nprint(cubes)\nprint (len (cubes))\n\n# Print the first three items in the list using a slice\nprint(\"\\nThe first three items in the list are:\")\nprint(cubes[:3])\n</pre> # Generate a list of the first 10 cubes using list comprehension cubes = [x**3 for x in range(1, 11)]  # Print the entire list of cubes print(\"The list of cubes:\") print(cubes) print (len (cubes))  # Print the first three items in the list using a slice print(\"\\nThe first three items in the list are:\") print(cubes[:3]) <pre>The list of cubes:\n[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n10\n\nThe first three items in the list are:\n[1, 8, 27]\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[7]: Copied! <pre># Print the first three items three items from the middle of the list.\nprint(\"\\nThe first three items in the list are:\")\nprint(cubes[3:6])\n</pre> # Print the first three items three items from the middle of the list. print(\"\\nThe first three items in the list are:\") print(cubes[3:6]) <pre>\nThe first three items in the list are:\n[64, 125, 216]\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[11]: Copied! <pre># Print the last three items three items from the middle of the list.\nprint(\"\\nThe first three items in the list are:\")\nprint(cubes[7:])\n</pre> # Print the last three items three items from the middle of the list. print(\"\\nThe first three items in the list are:\") print(cubes[7:]) <pre>\nThe first three items in the list are:\n[512, 729, 1000]\n</pre> In\u00a0[12]: Copied! <pre># Define a tuple with five basic foods\nfoods = (\"Pizza\", \"Pasta\", \"Salad\", \"Soup\", \"Burger\")\n\n# Use a for loop to print each food\nprint(\"The buffet-style restaurant offers the following foods:\")\nfor food in foods:\n    print(food)\n</pre> # Define a tuple with five basic foods foods = (\"Pizza\", \"Pasta\", \"Salad\", \"Soup\", \"Burger\")  # Use a for loop to print each food print(\"The buffet-style restaurant offers the following foods:\") for food in foods:     print(food)  <pre>The buffet-style restaurant offers the following foods:\nPizza\nPasta\nSalad\nSoup\nBurger\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[13]: Copied! <pre># ReDefine a tuple with five basic foods\nfoods = (\"Pizza\", \"Sushi\", \"Salad\", \"Ramen\", \"Burger\")\n\n# Use a for loop to print each food\nprint(\"The buffet-style restaurant offers the following foods:\")\nfor food in foods:\n    print (food)\n</pre> # ReDefine a tuple with five basic foods foods = (\"Pizza\", \"Sushi\", \"Salad\", \"Ramen\", \"Burger\")  # Use a for loop to print each food print(\"The buffet-style restaurant offers the following foods:\") for food in foods:     print (food) <pre>The buffet-style restaurant offers the following foods:\nPizza\nSushi\nSalad\nRamen\nBurger\n</pre> In\u00a0[15]: Copied! <pre>alien_color = [\"green\", \"yellow\", \"red\"]\n\nif \"green\" in alien_color:\n    print (\"the player just earned 5 points.\")\n</pre> alien_color = [\"green\", \"yellow\", \"red\"]  if \"green\" in alien_color:     print (\"the player just earned 5 points.\") <pre>the player just earned 5 points.\n</pre> In\u00a0[16]: Copied! <pre>alien_color = [\"green\", \"yellow\", \"red\"]\n\nif \"black\" in alien_color:\n    print (\"the player just earned 5 points.\")\n</pre> alien_color = [\"green\", \"yellow\", \"red\"]  if \"black\" in alien_color:     print (\"the player just earned 5 points.\") In\u00a0[19]: Copied! <pre>age = 1\n\nif age &lt; 2:\n    print(\"the person is a baby\")\nelif age &lt; 4:\n    print(\"the person is a toddler\")\nelif age &lt; 13:\n    print(\"the person is a kid\")\nelif age &lt; 20:\n    print(\"the person is a teenager\")\nelse:\n    print (\"the person is an adult\")\n</pre> age = 1  if age &lt; 2:     print(\"the person is a baby\") elif age &lt; 4:     print(\"the person is a toddler\") elif age &lt; 13:     print(\"the person is a kid\") elif age &lt; 20:     print(\"the person is a teenager\") else:     print (\"the person is an adult\") <pre>the person is a baby\n</pre> In\u00a0[20]: Copied! <pre>#List of fruit\nfavorite_fruits = [\"apple\",\"mango\",\"pear\"]\n\nif \"mango\" in favorite_fruits:\n    print(\"You really like mangoes!\")\n\nif \"strawberry\" in favorite_fruits:\n    print(\"You really like strawberries!\")\n\nif \"banana\" in favorite_fruits:\n    print(\"You really like bananas!\")\n\nif \"apple\" in favorite_fruits:\n    print(\"You really like apples!\")\n\nif \"pineapple\" in favorite_fruits:\n    print(\"You really like pineapples!\")\n</pre> #List of fruit favorite_fruits = [\"apple\",\"mango\",\"pear\"]  if \"mango\" in favorite_fruits:     print(\"You really like mangoes!\")  if \"strawberry\" in favorite_fruits:     print(\"You really like strawberries!\")  if \"banana\" in favorite_fruits:     print(\"You really like bananas!\")  if \"apple\" in favorite_fruits:     print(\"You really like apples!\")  if \"pineapple\" in favorite_fruits:     print(\"You really like pineapples!\") <pre>You really like mangoes!\nYou really like apples!\n</pre> In\u00a0[21]: Copied! <pre># List of usernames\nusernames = [\"admin\", \"Jaden\", \"Sophia\", \"Michael\", \"Emily\"]\n\n# Loop through the list and print a greeting for each user\nfor username in usernames:\n    if username == \"admin\":\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username}, thank you for logging in again.\")\n</pre> # List of usernames usernames = [\"admin\", \"Jaden\", \"Sophia\", \"Michael\", \"Emily\"]  # Loop through the list and print a greeting for each user for username in usernames:     if username == \"admin\":         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {username}, thank you for logging in again.\")  <pre>Hello admin, would you like to see a status report?\nHello Jaden, thank you for logging in again.\nHello Sophia, thank you for logging in again.\nHello Michael, thank you for logging in again.\nHello Emily, thank you for logging in again.\n</pre> In\u00a0[24]: Copied! <pre># List of current users (with some usernames repeated from current_users)\ncurrent_users = [\"admin\", \"Jaden\", \"Sophia\", \"Michael\", \"Emily\"]\n\n# lowercase versions\nlowercase_users = []\nfor user in current_users:\n    lowercase_users.append(user.lower())\nprint (lowercase_users)\n\n# List of new users (with some usernames repeated from current_users)\nnew_users = [\"Sophia\", \"Liam\", \"Michael\", \"Ava\", \"Oliver\"]\n\n# Loop through the new users to check if the username is available\nfor new_user in new_users:\n    if new_user.lower() in lowercase_users:\n        print(f\"The username '{new_user}' is already taken, please choose a different one.\")\n    else:\n        print(f\"The username '{new_user}' is available.\")\n</pre> # List of current users (with some usernames repeated from current_users) current_users = [\"admin\", \"Jaden\", \"Sophia\", \"Michael\", \"Emily\"]  # lowercase versions lowercase_users = [] for user in current_users:     lowercase_users.append(user.lower()) print (lowercase_users)  # List of new users (with some usernames repeated from current_users) new_users = [\"Sophia\", \"Liam\", \"Michael\", \"Ava\", \"Oliver\"]  # Loop through the new users to check if the username is available for new_user in new_users:     if new_user.lower() in lowercase_users:         print(f\"The username '{new_user}' is already taken, please choose a different one.\")     else:         print(f\"The username '{new_user}' is available.\") <pre>['admin', 'jaden', 'sophia', 'michael', 'emily']\nThe username 'Sophia' is already taken, please choose a different one.\nThe username 'Liam' is available.\nThe username 'Michael' is already taken, please choose a different one.\nThe username 'Ava' is available.\nThe username 'Oliver' is available.\n</pre> In\u00a0[28]: Copied! <pre>numbers = list(range(1,10))\nprint (numbers)\n\nfor number in numbers:\n    if number == 1:\n        print (\"1st\")\n    elif number == 2:\n        print (\"2nd\")\n    elif number == 3:\n        print (\"3rd\")\n    else:\n        print (str(number)+\"th\")\n</pre> numbers = list(range(1,10)) print (numbers)  for number in numbers:     if number == 1:         print (\"1st\")     elif number == 2:         print (\"2nd\")     elif number == 3:         print (\"3rd\")     else:         print (str(number)+\"th\") <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"examples/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"examples/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"examples/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"examples/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"examples/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"examples/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"examples/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"examples/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"examples/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"examples/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"examples/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"examples/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"examples/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"examples/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"examples/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"examples/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"examples/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"examples/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"examples/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"examples/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"examples/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/lab5/","title":"Lab5","text":"In\u00a0[1]: Copied! <pre># Dictionary to store information about a person\nperson = {\n    \"first_name\": \"Rachel\",\n    \"last_name\": \"Green\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# Print each piece of information\nprint(f\"First Name: {person['first_name']}\")\nprint(f\"Last Name: {person['last_name']}\")\nprint(f\"Age: {person['age']}\")\nprint(f\"City: {person['city']}\")\n</pre> # Dictionary to store information about a person person = {     \"first_name\": \"Rachel\",     \"last_name\": \"Green\",     \"age\": 30,     \"city\": \"New York\" }  # Print each piece of information print(f\"First Name: {person['first_name']}\") print(f\"Last Name: {person['last_name']}\") print(f\"Age: {person['age']}\") print(f\"City: {person['city']}\")  <pre>First Name: Rachel\nLast Name: Green\nAge: 30\nCity: New York\n</pre> In\u00a0[2]: Copied! <pre># Dictionary to store information about a person and their favorite number\nfav_number = {}\n\n# Poll five friends\nfor _ in range(5):\n    name = input(\"What is your name? \")\n    number = int(input(f\"Hi {name}, what is your favorite number? \"))\n    fav_number[name] = number\n\n# Print the results\nfor name, number in fav_number.items():\n    print(f\"{name}'s favorite number is {number}\")\n</pre> # Dictionary to store information about a person and their favorite number fav_number = {}  # Poll five friends for _ in range(5):     name = input(\"What is your name? \")     number = int(input(f\"Hi {name}, what is your favorite number? \"))     fav_number[name] = number  # Print the results for name, number in fav_number.items():     print(f\"{name}'s favorite number is {number}\") <pre>fio's favorite number is 24\nadit's favorite number is 1\nbayu's favorite number is 4\nrachel's favorite number is 88\nandri's favorite number is 7\n</pre> In\u00a0[6]: Copied! <pre># Glossary of programming words\nglossary = {\n    \"variable\": \"A container for storing data values.\",\n    \"function\": \"A block of code that performs a specific task and can be reused.\",\n    \"loop\": \"A control structure used to repeat a block of code multiple times.\",\n    \"dictionary\": \"A data structure that stores key-value pairs.\",\n    \"list\": \"A collection of items in a particular order.\"\n}\n\nfor language, value in glossary.items():\n    print(f\"{language.title()}:\\n {value}\\n\")\n</pre> # Glossary of programming words glossary = {     \"variable\": \"A container for storing data values.\",     \"function\": \"A block of code that performs a specific task and can be reused.\",     \"loop\": \"A control structure used to repeat a block of code multiple times.\",     \"dictionary\": \"A data structure that stores key-value pairs.\",     \"list\": \"A collection of items in a particular order.\" }  for language, value in glossary.items():     print(f\"{language.title()}:\\n {value}\\n\") <pre>Variable:\n A container for storing data values.\n\nFunction:\n A block of code that performs a specific task and can be reused.\n\nLoop:\n A control structure used to repeat a block of code multiple times.\n\nDictionary:\n A data structure that stores key-value pairs.\n\nList:\n A collection of items in a particular order.\n\n</pre> In\u00a0[7]: Copied! <pre># Glossary of programming words\nglossary = {\n    \"variable\": \"A container for storing data values.\",\n    \"function\": \"A block of code that performs a specific task and can be reused.\",\n    \"loop\": \"A control structure used to repeat a block of code multiple times.\",\n    \"dictionary\": \"A data structure that stores key-value pairs.\",\n    \"list\": \"A collection of items in a particular order.\"\n}\n\nglossary.update({\n    \"Python\": \"A versatile, high-level programming language known for its readability and wide range of applications.\",\n    \"JavaScript\": \"A lightweight, interpreted language commonly used for web development to make websites interactive.\",\n    \"Java\": \"A general-purpose, object-oriented programming language used in various domains, including mobile and enterprise applications.\",\n    \"C++\": \"An extension of the C programming language, widely used for system programming, game development, and performance-critical applications.\",\n    \"Ruby\": \"A dynamic, open-source programming language focused on simplicity and productivity, often used in web development.\"\n})\n\nfor language, value in glossary.items():\n    print(f\"{language.title()}:\\n {value}\\n\")\n</pre> # Glossary of programming words glossary = {     \"variable\": \"A container for storing data values.\",     \"function\": \"A block of code that performs a specific task and can be reused.\",     \"loop\": \"A control structure used to repeat a block of code multiple times.\",     \"dictionary\": \"A data structure that stores key-value pairs.\",     \"list\": \"A collection of items in a particular order.\" }  glossary.update({     \"Python\": \"A versatile, high-level programming language known for its readability and wide range of applications.\",     \"JavaScript\": \"A lightweight, interpreted language commonly used for web development to make websites interactive.\",     \"Java\": \"A general-purpose, object-oriented programming language used in various domains, including mobile and enterprise applications.\",     \"C++\": \"An extension of the C programming language, widely used for system programming, game development, and performance-critical applications.\",     \"Ruby\": \"A dynamic, open-source programming language focused on simplicity and productivity, often used in web development.\" })  for language, value in glossary.items():     print(f\"{language.title()}:\\n {value}\\n\") <pre>Variable:\n A container for storing data values.\n\nFunction:\n A block of code that performs a specific task and can be reused.\n\nLoop:\n A control structure used to repeat a block of code multiple times.\n\nDictionary:\n A data structure that stores key-value pairs.\n\nList:\n A collection of items in a particular order.\n\nPython:\n A versatile, high-level programming language known for its readability and wide range of applications.\n\nJavascript:\n A lightweight, interpreted language commonly used for web development to make websites interactive.\n\nJava:\n A general-purpose, object-oriented programming language used in various domains, including mobile and enterprise applications.\n\nC++:\n An extension of the C programming language, widely used for system programming, game development, and performance-critical applications.\n\nRuby:\n A dynamic, open-source programming language focused on simplicity and productivity, often used in web development.\n\n</pre> In\u00a0[10]: Copied! <pre>rivers = {\n    \"Nile\": \"Egypt\",\n    \"Amazon\": \"Brazil\",\n    \"Yangtze\": \"China\"\n}\n\nfor river, country in rivers.items():\n    print(f\"The {river} runs through {country}.\")\n\nprint(\"\\n\")\n\n# Name of each river\nfor river in rivers.keys():\n    print(river)\nprint(\"\\n\")\n\n# Name of each country\nfor country in rivers.values():\n    print(country)\n</pre> rivers = {     \"Nile\": \"Egypt\",     \"Amazon\": \"Brazil\",     \"Yangtze\": \"China\" }  for river, country in rivers.items():     print(f\"The {river} runs through {country}.\")  print(\"\\n\")  # Name of each river for river in rivers.keys():     print(river) print(\"\\n\")  # Name of each country for country in rivers.values():     print(country) <pre>The Nile runs through Egypt.\nThe Amazon runs through Brazil.\nThe Yangtze runs through China.\n\n\nNile\nAmazon\nYangtze\n\n\nEgypt\nBrazil\nChina\n</pre> In\u00a0[11]: Copied! <pre>cities = {\n    \"Tokyo\": {\n        \"country\": \"Japan\",\n        \"population\": \"37 million\",\n        \"fact\": \"Tokyo is the most populous metropolitan area in the world.\"\n    },\n    \"Paris\": {\n        \"country\": \"France\",\n        \"population\": \"11 million\",\n        \"fact\": \"Paris is known as the 'City of Light' and is famous for its art, fashion, and culture.\"\n    },\n    \"Cairo\": {\n        \"country\": \"Egypt\",\n        \"population\": \"21 million\",\n        \"fact\": \"Cairo is home to the Great Pyramid of Giza, one of the Seven Wonders of the Ancient World.\"\n    }\n}\n\n# Print each city's information\nfor city, info in cities.items():\n    print(f\"\\nCity: {city}\")\n    for key, value in info.items():\n        print(f\"  {key.title()}: {value}\")\n</pre> cities = {     \"Tokyo\": {         \"country\": \"Japan\",         \"population\": \"37 million\",         \"fact\": \"Tokyo is the most populous metropolitan area in the world.\"     },     \"Paris\": {         \"country\": \"France\",         \"population\": \"11 million\",         \"fact\": \"Paris is known as the 'City of Light' and is famous for its art, fashion, and culture.\"     },     \"Cairo\": {         \"country\": \"Egypt\",         \"population\": \"21 million\",         \"fact\": \"Cairo is home to the Great Pyramid of Giza, one of the Seven Wonders of the Ancient World.\"     } }  # Print each city's information for city, info in cities.items():     print(f\"\\nCity: {city}\")     for key, value in info.items():         print(f\"  {key.title()}: {value}\") <pre>\nCity: Tokyo\n  Country: Japan\n  Population: 37 million\n  Fact: Tokyo is the most populous metropolitan area in the world.\n\nCity: Paris\n  Country: France\n  Population: 11 million\n  Fact: Paris is known as the 'City of Light' and is famous for its art, fashion, and culture.\n\nCity: Cairo\n  Country: Egypt\n  Population: 21 million\n  Fact: Cairo is home to the Great Pyramid of Giza, one of the Seven Wonders of the Ancient World.\n</pre> In\u00a0[12]: Copied! <pre>car = input(f\"what kind of rental car you would like? \")\nprint(f\"Let me see if I can find you a {car.title()}.\")\n</pre> car = input(f\"what kind of rental car you would like? \") print(f\"Let me see if I can find you a {car.title()}.\") <pre>Let me see if I can find you a Wuling.\n</pre> In\u00a0[13]: Copied! <pre>find_people = int(input(\"How many people are in your dinner group? \"))\nif find_people &gt; 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")\n</pre> find_people = int(input(\"How many people are in your dinner group? \")) if find_people &gt; 8:     print(\"I'm sorry, you'll have to wait for a table.\") else:     print(\"Your table is ready.\") <pre>Your table is ready.\n</pre> In\u00a0[14]: Copied! <pre>number = int(input(\"Enter a number: \"))\nif number % 10 == 0:\n    print(\"The number is a multiple of 10.\")\nelse:\n    print(\"The number is not a multiple of 10.\")\n</pre> number = int(input(\"Enter a number: \")) if number % 10 == 0:     print(\"The number is a multiple of 10.\") else:     print(\"The number is not a multiple of 10.\") <pre>The number is a multiple of 10.\n</pre> In\u00a0[\u00a0]: Copied! <pre>pizza_toppings = []\n\nwhile True:\n    topping = input(\"Enter a topping for your pizza: \")\n    if topping == \"quit\":\n        break\n    else:\n        pizza_toppings.append(topping)\n        print(f\"you add {topping} to your pizza.\")\n\nprint(\"\\nYour pizza toppings are:\")\nfor topping in pizza_toppings:\n    print(topping)\n</pre> pizza_toppings = []  while True:     topping = input(\"Enter a topping for your pizza: \")     if topping == \"quit\":         break     else:         pizza_toppings.append(topping)         print(f\"you add {topping} to your pizza.\")  print(\"\\nYour pizza toppings are:\") for topping in pizza_toppings:     print(topping)  <pre>you add ayam to your pizza.\nyou add babi to your pizza.\n\nYour pizza toppings are:\n\nayam\nbabi\n</pre> In\u00a0[23]: Copied! <pre>def display_message():\n    print(\"what I'm learning about in Python: \\n\")\n    for python in python_topics:\n        print(f\"{python}\")\n\npython_topics = [\n    \"Basics of Python: Installation, syntax, variables, and data types\",\n    \"Control Flow: Conditionals, loops, and logical operators\",\n    \"Data Structures: Lists, tuples, dictionaries, and sets\",\n    \"Functions: Defining functions, arguments, return values, and scope\",\n    \"Modules and Libraries: Importing modules and creating your own\",\n    \"File Handling: Reading and writing files\",\n    \"Object-Oriented Programming (OOP): Classes, objects, inheritance\",\n    \"Error Handling: Using try, except, and finally blocks\",\n    \"Working with Libraries: Pandas, NumPy, Matplotlib, and more\",\n    \"Projects and Practice: Small projects like calculators or games\"\n]\n\ndisplay_message()\n</pre> def display_message():     print(\"what I'm learning about in Python: \\n\")     for python in python_topics:         print(f\"{python}\")  python_topics = [     \"Basics of Python: Installation, syntax, variables, and data types\",     \"Control Flow: Conditionals, loops, and logical operators\",     \"Data Structures: Lists, tuples, dictionaries, and sets\",     \"Functions: Defining functions, arguments, return values, and scope\",     \"Modules and Libraries: Importing modules and creating your own\",     \"File Handling: Reading and writing files\",     \"Object-Oriented Programming (OOP): Classes, objects, inheritance\",     \"Error Handling: Using try, except, and finally blocks\",     \"Working with Libraries: Pandas, NumPy, Matplotlib, and more\",     \"Projects and Practice: Small projects like calculators or games\" ]  display_message() <pre>I'm learning about in Python: \n\nBasics of Python: Installation, syntax, variables, and data types\nControl Flow: Conditionals, loops, and logical operators\nData Structures: Lists, tuples, dictionaries, and sets\nFunctions: Defining functions, arguments, return values, and scope\nModules and Libraries: Importing modules and creating your own\nFile Handling: Reading and writing files\nObject-Oriented Programming (OOP): Classes, objects, inheritance\nError Handling: Using try, except, and finally blocks\nWorking with Libraries: Pandas, NumPy, Matplotlib, and more\nProjects and Practice: Small projects like calculators or games\n</pre> In\u00a0[24]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\n\nfavorite_book(\"Alice in Wonderland\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}.\")  favorite_book(\"Alice in Wonderland\") <pre>One of my favorite books is Alice in Wonderland.\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[26]: Copied! <pre>def make_shirt(size, text):\n    print(f\"The size of the shirt is {size} and the text on the shirt is {text}.\")\n\nmake_shirt(\"large\", \"Hello, World!\")\n\n# Call the function using keyword arguments\nmake_shirt(text=\"Code your dreams!\", size=\"Medium\")\n</pre> def make_shirt(size, text):     print(f\"The size of the shirt is {size} and the text on the shirt is {text}.\")  make_shirt(\"large\", \"Hello, World!\")  # Call the function using keyword arguments make_shirt(text=\"Code your dreams!\", size=\"Medium\")  <pre>The size of the shirt is large and the text on the shirt is Hello, World!.\nThe size of the shirt is Medium and the text on the shirt is Code your dreams!.\n</pre> In\u00a0[29]: Copied! <pre>def make_shirt(size=(\"large\",\"medium\"), text=\"_i love python_\"):\n    print(f\"The size of the shirt is {size} and the text on the shirt is {text}.\")\n\nmake_shirt()\n</pre> def make_shirt(size=(\"large\",\"medium\"), text=\"_i love python_\"):     print(f\"The size of the shirt is {size} and the text on the shirt is {text}.\")  make_shirt()   <pre>The size of the shirt is ('large', 'medium') and the text on the shirt is _i love python_.\n</pre> In\u00a0[32]: Copied! <pre>def describe_city(city, country=\"iceland\"):\n    print(f\"{city} is in, {country}.\")\n\n# Call the function for three cities\ndescribe_city(\"Reykjavik\")  # Uses the default country\ndescribe_city(\"Akureyri\")   # Uses the default country\ndescribe_city(\"Tokyo\", \"Japan\")  # Overrides the default country\n</pre> def describe_city(city, country=\"iceland\"):     print(f\"{city} is in, {country}.\")  # Call the function for three cities describe_city(\"Reykjavik\")  # Uses the default country describe_city(\"Akureyri\")   # Uses the default country describe_city(\"Tokyo\", \"Japan\")  # Overrides the default country <pre>Reykjavik is in, iceland.\nAkureyri is in, iceland.\nTokyo is in, Japan.\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") In\u00a0[\u00a0]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"examples/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"examples/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"examples/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"examples/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"examples/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"examples/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"examples/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"examples/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"examples/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"examples/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"examples/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"examples/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"examples/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"examples/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"examples/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"examples/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"examples/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"examples/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"examples/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"examples/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"examples/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"examples/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"examples/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"examples/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"examples/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"examples/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"examples/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"examples/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"examples/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"examples/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"}]}